Task Sitter -- A harness to manage an arbitrary task or process.

Goal: Instead of thinking about how many machines you need to run a process on
the task sitter's goal is to force the admin to think instead in terms of CPU
and RAM, an to plan how much of each resource a process should use ahead of time.

The Task Sitter's job is to enforce the limits that the admin thinks a process
should obey.  It can handle the cases where a process disobeys these limits.

Together with a machine sitter a machine can be completely managed to run
various tasks efficiently within the resource constraints of the machine.

With a cluster sitter an admin can define how many CPUs and how much RAM a particular
task can use and it can go to machines, look for available CPU and RAM where
the process fits and slot it in there.

Task Sitter Details:
  -- Define constraints:
    - Should always be alive? (--ensure-alive)
    - Fixed % of a CPU (--cpu)
    - Fixed MB of RAM (--mem)
    - Fixed lifetime (--time-limit)

 -- Define runtime metadata
    - User ID (--uid)
    - Should the proc be restarted on violation? (--restart)
    - Maximum # of reboots (--max-restarts)
    - stdout / stderr directories (--std**-location)

 -- Monitoring
    - HTTP Based Monitor (--http-monitoring, --http-monitoring-port)

Machine Sitter Details:
 -- Monitor a set of TaskSitters
 -- Reboot TaskSitters if they fail (should never happen)
 -- Provide an API to add new tasks and start/stop tasks on a machine
 -- Provides central log access for all tasks

Cluster Sitter Details:
 -- Monitors a set of MachineSitters in a cluster
 -- Accepts 'Jobs' which define how many cpus/memory a particular task needs,
 finds or creates machines (and deploys machinesitters if necessary) and then
 activates the "Jobs" as tasks on each machine
 -- Provides a web UI to see where all your tasks are.
 -- Pulls in data and aggregates it from the cluster, to see task CPU
 usage, task rebooting behavior, machine performance data etc.
 -- Provides an abstract "DeploymentRecipe" class that you can fill out
 to have the clustersitter actually deploy your jobs automagically.
 -- Presently knows how to spinup/teardown AWS instances, though implementing
 other cloud providers should be pretty straightforward as there is a
 pretty minimal interface to the 'providers'.

-- Linked jobs: When job A is linked to job B job A will be placed on
   every and only the machines job A is placed on.  Job B will also be
   rebooted whenever job A is updated.