-- General event framework
 - Machine Deployed
 - Machine Terminated
 - etc.

-- Abstract out monitoredmachine so we can do something like monitoredmongo ?
-- Error reporting to UI -- what if we can't SSH into a machine, how is that reported?

--What happens to tasks and job fill if a machine is in POLL_FAILURES?
 - Right now nothing, the job thinks things are OK
 - First thing MachineDoctor does should be to clear the machine's
   tasks so the job will refill it elsewhere
-- Machine Doctor should use the job filler to launch machines
 - This will require a pretty non-trivial refactor of the jobfiller,
   but should be done

-- API to Add jobs while clustersitter is running
-- Lots of links in HTML page, to STDOUT etc.
-- Performance data in web console!
-- Archive old JobFillers?  Delete them?
-- machine sitter / console
 - Setup ENV with defaults for all child tasks
 - Configure actions in console / http
 - Configure settings in console / http
 - prettier web UI for starting/stopping tasks

-- cluster sitter ideas
   - local database (or cloud hosted somehow to avoid downtime?) of
      machines
   - Web UI to show... everything

-- For all stats sitters, look for a VERSION file and show that if available

Flesh out the stats collector, show CPU usage and history etc.
Set CPU Core Affinity
 -- (requires a subpackage 'affinity')
Have constraints output a % instead of a bool so we can do warnings at
thresholds
Implement HTTP Watcher
Implement Alerting in HTTP Interface
Implement 'flexible' limits, aka how long a process can be in
   violation before its killed
Add Logging instead of printing inside task sitter
  Expose task-sitter logs, too!
fix the type= parameter for python 2.6 compatibility
